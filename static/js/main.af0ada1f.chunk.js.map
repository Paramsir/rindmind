{"version":3,"sources":["components/Home.js","components/MyFooter.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Article","props","useState","dialogIsOpen","setDialogIsOpen","class","onClick","title","src","img","para","isOpen","onRequestClose","style","float","originUrl","Home","state","newsData","isLoaded","fetch","response","json","data","this","setState","JSON","stringify","console","log","articles","generateArticalArray","parse","map","article","urlToImage","description","url","Component","MyFooter","className","About","uploadPercentage","avatar","componentDidMount","uploadFile","files","target","FormData","append","options","onUploadProgress","progressEvent","loaded","total","percent","Math","floor","axios","post","then","res","setTimeout","href","type","onChange","ProgressBar","now","active","label","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af0ada1f.chunk.js","sourcesContent":["import React, {useState, Fragment, Component} from 'react';\nimport '../css/body.css';\nimport ReactModal from 'react-modal'\nimport { render } from '@testing-library/react';\n\nclass Home extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n          newsData :[],\n          isLoaded : false\n        }\n      }\n\n    async componentDidMount(){\n        const url = \"https://newsapi.org/v2/top-headlines?country=in&apiKey=de63571ebc714ae6828e37c65bb712bf\";\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({newsData: JSON.stringify(data)})\n        console.log(this.state.newsData)  \n      };\n   \n    render(){\n        let articles = this.generateArticalArray()\n        return(\n            <div>\n                <main class=\"myBody\">\n                    <img src=\"https://source.unsplash.com/1600x400/?laptop\"></img>\n                    <div class=\"grid-container\">\n                        { \n                           articles \n                        }\n                    </div>\n                </main>\n    \n            </div>\n    \n        );\n    }\n\n    generateArticalArray() {\n        let articles;\n        console.log(\"Data received is : \" + this.state.newsData)\n           \n            if(this.state.newsData != null){\n                try{\n                    let newsJson = JSON.parse(this.state.newsData);\n                    let newsList = newsJson.articles;\n                    articles = newsList.map(article => \n                        <Article class = { \"col col-1\" } \n                                title = { article.title }\n                                img = { article.urlToImage }\n                                para = { article.description }\n                                originUrl = {article.url}\n                        />\n                    )\n                }catch{\n                    \n                }\n               \n            }\n        return articles\n    }\n    \n}\n\n\nfunction Article(props){\n\n    var closeDivStyle = {\n        float:\"right\"\n    }\n\n    const[dialogIsOpen,setDialogIsOpen] = useState(false)\n\n    return(\n        <div class={props.class}>\n            <div onClick = {() => setDialogIsOpen(true)}>\n                <h2>{props.title} </h2>\n                <img src={props.img} />\n                <p class=\"para\">{props.para}</p>\n            </div>\n\n            <div>               \n                    <ReactModal isOpen={dialogIsOpen} \n                                onRequestClose = {() => setDialogIsOpen(false)}> \n                        <div style = { closeDivStyle}>\n                            <button\n                                class =\"dialog-close-btn\" \n                                onClick={()=> setDialogIsOpen(false)}>\n                                X\n                            </button>\n                        </div>\n                        <div class=\"dialog\">\n                            <iframe class =\"dialog\" src={props.originUrl} />\n                        </div> \n                       \n                    </ReactModal>  \n                               \n            </div>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\n\nfunction MyFooter(){\n    return (\n        <footer className=\"myFooter\">\n            copyright 2020 @ RindMind.com | All rights reserved\n        </footer>\n    );\n}\n\nexport default MyFooter;","import React, { Component } from \"react\";\nimport {ProgressBar} from 'react-bootstrap';\nimport axios from 'axios';\nimport \"../css/About.css\"\n\nexport class About extends Component {\n\n  state = {\n    uploadPercentage: 0,\n    avatar: ''\n  }\n\n  componentDidMount = () =>{\n    const {avatar} = this.props;\n    this.setState({ avatar })\n  }\n\n  uploadFile = ({ target: { files } }) =>{\n    console.log( files[0] )\n    let data = new FormData();\n    data.append( 'file', files[0] )\n\n    const options = {\n      onUploadProgress: (progressEvent) => {\n        const {loaded, total} = progressEvent;\n        let percent = Math.floor( (loaded * 100) / total )\n        console.log( `${loaded}kb of ${total}kb | ${percent}%` );\n\n        if( percent < 100 ){\n          this.setState({ uploadPercentage: percent })\n        }\n      }\n    }\n\n    axios.post(\"https://www.mocky.io/v2/5cc8019d300000980a055e76\", data, options).then(res => { \n        console.log(res)\n        this.setState({ avatar: res.data.url, uploadPercentage: 100 }, ()=>{\n          setTimeout(() => {\n            this.setState({ uploadPercentage: 0 })\n          }, 1000);\n        })\n    })\n  }\n\n  render() {\n    const {uploadPercentage} = this.state;\n    return (\n      <div className=\"uploadbox\">     \n            <a href=\"#\">\n              <input type=\"file\" className=\"form-control file-uploader\" onChange={this.uploadFile} />\n              { uploadPercentage > 0 && <ProgressBar now={uploadPercentage} active label={`${uploadPercentage}%`} /> }\n            </a>\n      </div>\n    );\n  }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\nimport './css/App.css';\nimport Home from './components/Home.js';\nimport MyFooter from './components/MyFooter.js';\nimport About from './components/About.js';\n\nclass App extends Component {\n\n    render(){\n      return (\n        <div className=\"App\">              \n          <HashRouter>\n            <nav class= \"myNavBar\">\n              <div>\n                <header class=\"App-header\"> <span>R</span>ind<span>M</span>ind </header>\n                <div class=\"tagline\"> The Spiritual Technocrat </div>\n              </div>\n              <div>\n                <ul >      \n                  <li><a  target=\"_blank\" href=\"https://paramsir.github.io/\"> Recent Posts  </a></li>\n                  <li><NavLink to=\"/about\"> about </NavLink></li>\n                  <li><NavLink to=\"/\"> Home </NavLink></li>\n                </ul>\n              </div>\n            </nav>\n            <div className=\"content\">\n                  <Route exact path=\"/\" component={ Home }/>\n                  <Route path=\"/about\" component={ About }/>            \n              </div>\n          </HashRouter>\n          <MyFooter />\n    \n        </div>\n    \n      );\n    }\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}